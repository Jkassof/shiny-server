{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(shinyBS)\nlibrary(DT)\n\n\nshinyServer(function(input, output, session) {\n  \n  # unconfirmed_trans <- reactivePoll(1000, session, \n  #                                   checkFunc = update_checker,\n  #                                   valueFunc = )\n  ########### Start right above this!!! #########\n  \n  output$tbl <- DT::renderDataTable(\n    iris,\n    options = list(paging = FALSE,\n                   dom = \"Brtip\",\n                   buttons = c(\"copy\", \"excel\", \"pdf\", \"print\"),\n                   autoWidth = TRUE),\n    rownames = FALSE,\n    extensions = \"Buttons\",\n    filter = 'top',\n    selection = list(selected = seq_along(1:nrow(iris)))\n  )\n  \n  output$select_button <- renderUI({\n    search_string <- if(purrr::is_null(input$tbl_search_columns)) \"\" else input$tbl_search_columns\n    if (all(search_string ==  \"\")) {\n      actionButton('select_but', \"Select/Deselect All\", style = \"background-color: rgb(127, 129, 130); color: White;\")\n    }  else {\n      actionButton('select_but', \"Select/Deselect Filtered Only\", style = \"background-color: rgb(127, 129, 130); color: White;\")\n    }\n  })\n  \n  proxy <-  dataTableProxy('tbl')\n  \n  observeEvent(input$all, {\n    if (input$all %% 2 != 0) {\n      proxy %>% selectRows(NULL)\n    } else {\n      proxy %>% selectRows(seq_along(1:nrow(iris)))\n    }\n  })\n  \n  observeEvent(input$select_but, {\n    selected <- input$tbl_rows_selected\n    filtered <-  input$tbl_rows_current\n    if (all(input$tbl_search_columns == \"\") & purrr::is_null(selected)) {\n      proxy %>% selectRows(seq_along(1:nrow(iris)))\n    } else if (all(input$tbl_search_columns == \"\")) {\n      proxy %>% selectRows(NULL)\n    } else if (all(filtered %in% selected)) {\n       proxy %>% selectRows(setdiff(selected, filtered))\n    } else {\n       proxy %>% selectRows(filtered)\n    }\n  })\n  \n  observeEvent(input$confirm, {\n    selected <- length(input$tbl_rows_selected)\n    all_rows <- nrow(iris)\n    output$statement <- shiny::renderText({\n      if (selected == all_rows) {\n        \"You have selected all trades to be confirmed\"  \n      } else {\n        paste(\"You have selected\", selected, \"trades to be confirmed\")\n\n    }\n    })\n    if (selected == 0) {\n      createAlert(session, \"above_table\",\n                  content = \"There are no selected trades, please select trades for confirmation\",\n                  style = \"warning\")\n    } else {\n    show(\"confirmation_box\", anim = TRUE)\n    }\n  })\n  \n  observeEvent(input$deny_confirm, {\n    hide(\"confirmation_box\", anim = TRUE)\n  })\n  \n  observeEvent(input$confirm_confirm, {\n    hide(\"confirmation_box\", anim = TRUE)\n    createAlert(session, \"above_table\",\n                content = \"Thanks for the trades! Have a nice day :)\",\n                style = \"success\")\n    #confirm_selected_trades(input)\n  })\n  \n  observeEvent(input$escalate, {\n    selected <- length(input$tbl_rows_selected)\n    all_rows <- nrow(iris)\n    output$escalate_statement <- shiny::renderText({\n      if (selected == all_rows) {\n        \"You have selected all trades to be escalated\"  \n      } else {\n        paste(\"You have selected\", selected, \"trades to be escalated\")\n        \n      }\n    })\n    if (selected == 0) {\n      createAlert(session, \"above_table\",\n                  content = \"There are no selected trades, please select trades for escalation\",\n                  style = \"warning\")\n    } else {\n      show(\"escalation_box\", anim = TRUE) \n    }\n  })\n  \n  observeEvent(input$deny_escalate, {\n    hide(\"escalation_box\", anim = TRUE)\n  })\n  \n  observeEvent(input$confirm_escalate, {\n    hide(\"escalation_box\", anim = TRUE)\n    createAlert(session, \"above_table\",\n                content = \"Your trades have been escalated to trading and compliance\",\n                style = \"warning\")\n  })\n  \n  output$counter <- renderText({\n    all_rows <- nrow(iris)\n    row_select_count <- length(input$tbl_rows_selected)\n    if (row_select_count == all_rows) {\n    \"All trades selected\"  \n    } else {\n    paste(length(input$tbl_rows_selected), \"out of\", all_rows, \"trades selected\")\n  }})\n  \n  # output$selected <- renderPrint(input$tbl_rows_selected)\n  # output$filtered <- renderPrint(input$tbl_rows_current)\n  # output$search <- renderPrint(input$tbl_search_columns)\n  \n\n})\n",
    "created" : 1485057682792.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2551702840",
    "id" : "A7E5C2D3",
    "lastKnownWriteTime" : 1485124698,
    "last_content_update" : 1485124698024,
    "path" : "~/daily_blotter/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}